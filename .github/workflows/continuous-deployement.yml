name: CI/CD Pipeline
on:
  pull_request:
    types: [closed]
    branches:
      - main
jobs:
  sonarCloud:
      name: Build and analyze
      runs-on: windows-latest
      steps:
        - name: Set up JDK 17
          uses: actions/setup-java@v3
          with:
            java-version: 17
            distribution: 'zulu' # Alternative distribution options are available.
        - uses: actions/checkout@v3
          with:
            fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
        - name: Cache SonarCloud packages
          uses: actions/cache@v3
          with:
            path: ~\sonar\cache
            key: ${{ runner.os }}-sonar
            restore-keys: ${{ runner.os }}-sonar
        - name: Cache SonarCloud scanner
          id: cache-sonar-scanner
          uses: actions/cache@v3
          with:
            path: .\.sonar\scanner
            key: ${{ runner.os }}-sonar-scanner
            restore-keys: ${{ runner.os }}-sonar-scanner
        - name: Install SonarCloud scanner
          if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
          shell: powershell
          run: |
            New-Item -Path .\.sonar\scanner -ItemType Directory
            dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
        - name: Build and analyze
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          shell: powershell
          run: |
            .\.sonar\scanner\dotnet-sonarscanner begin /k:"descrysama_crm-microservice" /o:"descrysama" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
            dotnet build
            .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
  save-build-to-images:
    needs: sonarCloud
    runs-on: self-hosted
    steps:
      - name: Pull Data from main branch
        uses: actions/checkout@v2

      - name: Build Docker images
        run: |
          sudo docker-compose -f docker-compose.yml build 
          sudo docker save usermicroservice > usermicroservice.tar 
          sudo docker save productmicroservice > productmicroservice.tar
      - name: Transfer Docker Image to Server
        run: |
          sshpass -p ${{ secrets.PASSWORD }} scp -o StrictHostKeyChecking=no usermicroservice.tar ${{ secrets.USERNAME }}@${{ secrets.HOST }}:/root/
          sshpass -p ${{ secrets.PASSWORD }} scp -o StrictHostKeyChecking=no productmicroservice.tar ${{ secrets.USERNAME }}@${{ secrets.HOST }}:/root/
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
      - name: Load Docker Image on Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          port: 22
          script: |
            ./resetimages.sh
            
      - name: Remove Docker Images
        run: sudo docker image prune -a -f
