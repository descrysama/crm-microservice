// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using productMicroService;

#nullable disable

namespace productMicroService.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("productMicroService.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BillingAddressId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryAddressId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MainEmail")
                        .HasColumnType("longtext");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentmethodId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<string>("Siret")
                        .HasColumnType("longtext");

                    b.Property<string>("TvaNumber")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BillingAddressId")
                        .IsUnique();

                    b.HasIndex("CreatedById");

                    b.HasIndex("DeliveryAddressId")
                        .IsUnique();

                    b.HasIndex("OwnerId");

                    b.HasIndex("PaymentmethodId")
                        .IsUnique();

                    b.HasIndex("UpdatedById");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("productMicroService.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AccessLevel")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("productMicroService.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeactivated")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MobilePhone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("RequiredAuthorization")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("OwnerId");

                    b.HasIndex("UpdatedById");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("productMicroService.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryCode = "AL",
                            Name = "Albania"
                        },
                        new
                        {
                            Id = 2,
                            CountryCode = "AD",
                            Name = "Andorra"
                        },
                        new
                        {
                            Id = 3,
                            CountryCode = "AM",
                            Name = "Armenia"
                        },
                        new
                        {
                            Id = 4,
                            CountryCode = "AT",
                            Name = "Austria"
                        },
                        new
                        {
                            Id = 5,
                            CountryCode = "AZ",
                            Name = "Azerbaijan"
                        },
                        new
                        {
                            Id = 6,
                            CountryCode = "BY",
                            Name = "Belarus"
                        },
                        new
                        {
                            Id = 7,
                            CountryCode = "BE",
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = 8,
                            CountryCode = "BA",
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = 9,
                            CountryCode = "BG",
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = 10,
                            CountryCode = "HR",
                            Name = "Croatia"
                        },
                        new
                        {
                            Id = 11,
                            CountryCode = "CY",
                            Name = "Cyprus"
                        },
                        new
                        {
                            Id = 12,
                            CountryCode = "CZ",
                            Name = "Czech Republic"
                        },
                        new
                        {
                            Id = 13,
                            CountryCode = "DK",
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = 14,
                            CountryCode = "EE",
                            Name = "Estonia"
                        },
                        new
                        {
                            Id = 15,
                            CountryCode = "FI",
                            Name = "Finland"
                        },
                        new
                        {
                            Id = 16,
                            CountryCode = "FR",
                            Name = "France"
                        },
                        new
                        {
                            Id = 17,
                            CountryCode = "GE",
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = 18,
                            CountryCode = "DE",
                            Name = "Germany"
                        },
                        new
                        {
                            Id = 19,
                            CountryCode = "GR",
                            Name = "Greece"
                        },
                        new
                        {
                            Id = 20,
                            CountryCode = "HU",
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = 21,
                            CountryCode = "IS",
                            Name = "Iceland"
                        },
                        new
                        {
                            Id = 22,
                            CountryCode = "IE",
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = 23,
                            CountryCode = "IT",
                            Name = "Italy"
                        },
                        new
                        {
                            Id = 24,
                            CountryCode = "KZ",
                            Name = "Kazakhstan"
                        },
                        new
                        {
                            Id = 25,
                            CountryCode = "XK",
                            Name = "Kosovo"
                        },
                        new
                        {
                            Id = 26,
                            CountryCode = "LV",
                            Name = "Latvia"
                        },
                        new
                        {
                            Id = 27,
                            CountryCode = "LI",
                            Name = "Liechtenstein"
                        },
                        new
                        {
                            Id = 28,
                            CountryCode = "LT",
                            Name = "Lithuania"
                        },
                        new
                        {
                            Id = 29,
                            CountryCode = "LU",
                            Name = "Luxembourg"
                        },
                        new
                        {
                            Id = 30,
                            CountryCode = "MT",
                            Name = "Malta"
                        },
                        new
                        {
                            Id = 31,
                            CountryCode = "MD",
                            Name = "Moldova"
                        },
                        new
                        {
                            Id = 32,
                            CountryCode = "MC",
                            Name = "Monaco"
                        },
                        new
                        {
                            Id = 33,
                            CountryCode = "ME",
                            Name = "Montenegro"
                        },
                        new
                        {
                            Id = 34,
                            CountryCode = "NL",
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = 35,
                            CountryCode = "MK",
                            Name = "North Macedonia"
                        },
                        new
                        {
                            Id = 36,
                            CountryCode = "NO",
                            Name = "Norway"
                        },
                        new
                        {
                            Id = 37,
                            CountryCode = "PL",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = 38,
                            CountryCode = "PT",
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = 39,
                            CountryCode = "RO",
                            Name = "Romania"
                        },
                        new
                        {
                            Id = 40,
                            CountryCode = "RU",
                            Name = "Russia"
                        },
                        new
                        {
                            Id = 41,
                            CountryCode = "SM",
                            Name = "San Marino"
                        },
                        new
                        {
                            Id = 42,
                            CountryCode = "RS",
                            Name = "Serbia"
                        },
                        new
                        {
                            Id = 43,
                            CountryCode = "SK",
                            Name = "Slovakia"
                        },
                        new
                        {
                            Id = 44,
                            CountryCode = "SI",
                            Name = "Slovenia"
                        },
                        new
                        {
                            Id = 45,
                            CountryCode = "ES",
                            Name = "Spain"
                        },
                        new
                        {
                            Id = 46,
                            CountryCode = "SE",
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = 47,
                            CountryCode = "CH",
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = 48,
                            CountryCode = "TR",
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = 49,
                            CountryCode = "UA",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = 50,
                            CountryCode = "GB",
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = 51,
                            CountryCode = "VA",
                            Name = "Vatican City"
                        });
                });

            modelBuilder.Entity("productMicroService.Entities.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("InvoiceUuid")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("QuoteId")
                        .HasColumnType("int");

                    b.Property<string>("RequiredAuthorization")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("TaxPercentage")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalWithTax")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalWithTaxWithDiscount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ContactId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("QuoteId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("UserId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("productMicroService.Entities.InvoiceProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<decimal?>("DiscountPercentage")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("TaxPercentage")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalWithTax")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalWithTaxWithDiscount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("UpdatedById");

                    b.ToTable("InvoiceProduct");
                });

            modelBuilder.Entity("productMicroService.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Percentage")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethod");
                });

            modelBuilder.Entity("productMicroService.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeactivated")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LastModifiedById")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("productMicroService.Entities.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AccountId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("QuoteUuid")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RequiredAuthorization")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("TaxPercentage")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalWithTax")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("TotalWithTaxWithDiscount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UpdatedById")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ContactId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("UpdatedById");

                    b.HasIndex("UserId");

                    b.ToTable("Quote");
                });

            modelBuilder.Entity("productMicroService.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("productMicroService.Entities.Tax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Tax");
                });

            modelBuilder.Entity("productMicroService.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("RoleId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("productMicroService.Entities.Account", b =>
                {
                    b.HasOne("productMicroService.Entities.Address", "BillingAddress")
                        .WithOne()
                        .HasForeignKey("productMicroService.Entities.Account", "BillingAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("productMicroService.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("productMicroService.Entities.Address", "DeliveryAddress")
                        .WithOne()
                        .HasForeignKey("productMicroService.Entities.Account", "DeliveryAddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("productMicroService.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("productMicroService.Entities.PaymentMethod", "PaymentMethod")
                        .WithOne()
                        .HasForeignKey("productMicroService.Entities.Account", "PaymentmethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("productMicroService.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BillingAddress");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeliveryAddress");

                    b.Navigation("Owner");

                    b.Navigation("PaymentMethod");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("productMicroService.Entities.Address", b =>
                {
                    b.HasOne("productMicroService.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("productMicroService.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("productMicroService.Entities.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("productMicroService.Entities.Contact", b =>
                {
                    b.HasOne("productMicroService.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("productMicroService.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("productMicroService.Entities.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("productMicroService.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("CreatedBy");

                    b.Navigation("Owner");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("productMicroService.Entities.Invoice", b =>
                {
                    b.HasOne("productMicroService.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("productMicroService.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("productMicroService.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("productMicroService.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("productMicroService.Entities.Quote", "Quote")
                        .WithMany()
                        .HasForeignKey("QuoteId");

                    b.HasOne("productMicroService.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("productMicroService.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Contact");

                    b.Navigation("CreatedBy");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Quote");

                    b.Navigation("UpdatedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("productMicroService.Entities.InvoiceProduct", b =>
                {
                    b.HasOne("productMicroService.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("productMicroService.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("productMicroService.Entities.Product", b =>
                {
                    b.HasOne("productMicroService.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("productMicroService.Entities.User", "LastModifiedBy")
                        .WithMany()
                        .HasForeignKey("LastModifiedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("LastModifiedBy");
                });

            modelBuilder.Entity("productMicroService.Entities.Quote", b =>
                {
                    b.HasOne("productMicroService.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.HasOne("productMicroService.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId");

                    b.HasOne("productMicroService.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("productMicroService.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId");

                    b.HasOne("productMicroService.Entities.User", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("productMicroService.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Contact");

                    b.Navigation("CreatedBy");

                    b.Navigation("PaymentMethod");

                    b.Navigation("UpdatedBy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("productMicroService.Entities.User", b =>
                {
                    b.HasOne("productMicroService.Entities.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("productMicroService.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
